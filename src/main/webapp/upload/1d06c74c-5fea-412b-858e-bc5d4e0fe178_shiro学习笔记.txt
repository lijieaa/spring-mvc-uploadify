1.认证 authentication

2.授权  authorization

3.会话管理 session manager

4.加密 cryptography

5.web扶持 web support

6.缓存 caching

7.shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去  concurrency

8.提供测试支持 testing

9.允许一个用户假装为另一个用户（如果他们允许）的身份进行访问 run as

10.记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了 remember

注意：记住一点，shiro不会去维护用户，维护权限；这些需要我们自己支设计/提供；然后通过相应的接口注入给shiro即可；

app->subject->shiro security manager->realm

可以看到：应用代码直接交互的对象是subject，也就是说shiro的对外核心api就是subject;其每个API的含义：

11.subject 主体，代表当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是subject,如网络爬虫，机器人等；即一个抽象概念；所有subject都绑定到securitymanager，与subject的所有交互都会委托给securitymanager;可以把subject认为是一个门面；securityManager才是实际的执行者；

securityManager：安全管理器；即所有与安全有关的操作都会与securityManager交互；且它管理着所有的subject;可以看出它是shiro的核心，它负责与后边介绍的其他组件进行交互，如果学习过springmvc，你可以把它看成dispatcherservlet前端控制器；

realm:域，shiro从realm获取安全数据（如用户，角色，权限），就是说securityManager要验证用户身份，那么它需要从realm获取相应的用户进行比较以确定身份是否合法;也需要从realm得到用户相应的角色/权限进行验证是否进行操作;可以把realm看成datasource,即安全数据源。



最简单的一个shiro应用：
1.应用代码通过subject来进行认证和制授权，而subject又委托给securityManager;
2.我们需要给shiro的securityManager注入Realm，从而让securityManager能得到合法的用户用




